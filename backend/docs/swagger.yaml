definitions:
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterInput:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.CategoryListResponse:
    properties:
      id:
        type: integer
      name:
        type: integer
      user_id:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.UserChangePassword:
    properties:
      new_password:
        type: string
      password:
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  models.UserUpdateInput:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Lista as categorias do usuário
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Lista as categorias
      tags:
      - category
    post:
      consumes:
      - application/json
      description: Cria uma categoria de transação
      parameters:
      - description: Nome da categoria
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cria uma categoria
      tags:
      - category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Deleta a categoria em questão
      parameters:
      - description: ID da categoria
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deleta uma categoria
      tags:
      - category
    put:
      consumes:
      - application/json
      description: Atualiza uma categoria do usuário
      parameters:
      - description: ID da categoria
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualiza uma categoria
      tags:
      - category
  /login:
    post:
      consumes:
      - application/json
      description: Login de usuários no sistema
      parameters:
      - description: Request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login de usuários
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Registra um usuário no sistema
      parameters:
      - description: Request Body with User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Registra um usuário
      tags:
      - auth
  /users/me:
    delete:
      consumes:
      - application/json
      description: Deleta o usuário em questão
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deleta um usuário
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Retorna os dados do usuário em questão
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retorna dados do usuário
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Atualiza dados do usuário em questão
      parameters:
      - description: Request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualiza dados do usuário
      tags:
      - user
  /users/password:
    put:
      description: Atualiza a senha do usuário em questão
      parameters:
      - description: Request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserChangePassword'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualiza a senha do usuário
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
